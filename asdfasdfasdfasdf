package frc.robot;


import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.CANSparkLowLevel.MotorType;

public class Robot extends TimedRobot {
  XboxController driveController = new XboxController(0);
  CANSparkMax intakePivot = new CANSparkMax(2, MotorType.kBrushless);
  CANSparkMax A = new CANSparkMax (1, MotorType.kBrushless);
  CANSparkMax B = new CANSparkMax (7, MotorType.kBrushless);
  
  private RelativeEncoder intakePivotEncoder;

  @Override
  public void robotInit() {
    // initialize SPARK MAX
    

    /**
     * The RestoreFactoryDefaults method can be used to reset the configuration parameters
     * in the SPARK MAX to their factory default state. If no argument is passed, these
     * parameters will not persist between power cycles
     */
    

    /**
    * In order to read encoder values an encoder object is created using the 
    * getEncoder() method from an existing CANSparkMax object
    */
    intakePivotEncoder = intakePivot.getEncoder();

    
  }

  @Override
  public void teleopPeriodic() {
    // set the motor output based on jostick position
    double intakePivotSpeed = driveController.getLeftY();

    intakePivot.set(intakePivotSpeed);

    /**
     * Encoder position is read from a RelativeEncoder object by calling the
     * GetPosition() method.
     * 
     * GetPosition() returns the position of the encoder in units of revolutions
     */
    SmartDashboard.putNumber("Encoder Position", intakePivotEncoder.getPosition());

  }
}
