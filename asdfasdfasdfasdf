package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkLowLevel.MotorType;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.motorcontrol.VictorSP;
import edu.wpi.first.wpilibj.DigitalInput; 
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Encoder;

public class Robot extends TimedRobot {
  //Motors:
  CANSparkMax flywheelA = new CANSparkMax(1, MotorType.kBrushless);
  CANSparkMax flywheelB = new CANSparkMax(2, MotorType.kBrushless);
  VictorSP driveLeftA = new VictorSP(3);
  VictorSP driveLeftB = new VictorSP(4);
  VictorSP driveRightA = new VictorSP(5);
  VictorSP driveRightB = new VictorSP(6);
  CANSparkMax climbLeft = new CANSparkMax(7, MotorType.kBrushless);
  CANSparkMax climbRight = new CANSparkMax(8, MotorType.kBrushless);
  CANSparkMax intakePivot = new CANSparkMax(9, MotorType.kBrushless);
  CANSparkMax flap = new CANSparkMax(10, MotorType.kBrushless);
  CANSparkMax intake = new CANSparkMax(11, MotorType.kBrushless);
  
  //Encoders
  


  //Limit Switches:
  DigitalInput intakeOut;
  DigitalInput intakeIn;
  DigitalInput intakePieceDetection;
  DigitalInput flapIn;
  DigitalInput flapOut;

  XboxController driveController = new XboxController(0);

  //Variable Thingys:

  //Drive
  double turn;
  double forward;

  //Intake
  double intakeSpeed = 0.5;
  boolean intakeActive;

  //Outake
  double outakeSpeed = -0.5;
  boolean outakeActive;
  
  //Intake Pivot
  double intakePivotSpeed = 0.25;
  boolean intakePivotActive;

  //Flap
  double flapSpeed = 0.25;

  //Flywheel
  double flywheelSpeakerSpeed = 1;
  boolean flywheelActive;
  double flywheelAmpSpeed = 0.25;

  //Climb
  double climbSpeedUp = 0.75;
  double climbSpeedDown = -1;



  @Override
  public void robotInit() {
  //Directionals
  driveLeftA.setInverted(true);
  driveLeftB.setInverted(true);
  driveRightA.setInverted(false);
  driveRightB.setInverted(false);
  intakePivot.setInverted(false);
  intakePivot.burnFlash();
  intake.setInverted(false);
  intake.burnFlash();
  flywheelA.setInverted(false);
  flywheelA.burnFlash();
  flywheelB.setInverted(true);
  flywheelB.burnFlash();
  flap.setInverted(false);
  flap.burnFlash();
  climbLeft.setInverted(false);
  climbLeft.burnFlash();
  climbRight.setInverted(false);

  //Setting Motors Off
  driveLeftA.set(0);
  driveLeftB.set(0);
  driveRightA.set(0);
  driveRightB.set(0);
  intakePivot.set(0);
  intake.set(0);
  flywheelA.set(0);
  flywheelB.set(0);
  flap.set(0);
  climbLeft.set(0);
  climbRight.set(0);

  //Limit Switches
  intakeOut = new DigitalInput(0);
  intakeIn = new DigitalInput(1);
  intakePieceDetection = new DigitalInput(2);
  flapIn = new DigitalInput(3);
  flapOut = new DigitalInput(4);
  }

  @Override
  public void robotPeriodic() {
  //Drive:
  double forward = -driveController.getLeftY();
  double turn = -driveController.getRightX();

  double driveLeftPower = forward - turn;
  double driveRightPower = forward + turn;

  driveLeftA.set(driveLeftPower);
  driveLeftB.set(driveLeftPower);
  driveRightA.set(driveRightPower);
  driveRightB.set(driveRightPower);

  if (driveController.getLeftStickButtonPressed()) //Reverse Drive Controls
    {
        turn *= -1;
      }  
  }

  @Override
  public void autonomousInit() {}

  @Override
  public void autonomousPeriodic() {}

  @Override
  public void teleopInit() {}

  @Override
  public void teleopPeriodic() {
    

    
    if (driveController.getAButtonPressed()) //Intake Down
    {
      intakePivot.set(intakePivotSpeed);
    }
    else if (driveController.getXButtonPressed()) //Intake Up
    {
      intakePivot.set(-intakePivotSpeed);
    }
    else if (driveController.getBButtonPressed()) //Amp Sequence -> HOLD IT DOWN TILL COMPLETE
    {
      flywheelA.set(flywheelAmpSpeed);
      flywheelB.set(flywheelAmpSpeed);
      flap.set(flapSpeed);
      intake.set(outakeSpeed + 0.15);

    }
    else if (driveController.getBButtonReleased())
    {
      flywheelA.set(0);
      flywheelB.set(0);
      flap.set(-flapSpeed);
      intake.set(0);

    }
    else if (driveController.getYButtonPressed()) //Speaker Sequence -> HOLD IT DOWN TILL COMPLETE
    {
      flywheelA.set(flywheelSpeakerSpeed);
      flywheelB.set(flywheelSpeakerSpeed - 5);
      intake.set(outakeSpeed);
    }
    else if (driveController.getYButtonReleased()) 
    {
      flywheelA.set(0);
      flywheelB.set(0);
      intake.set(0);


    }
    
    if (driveController.getRightStickButtonPressed()) //Kill Motors
    {
      driveLeftA.set(0);
      driveLeftB.set(0);
      driveRightA.set(0);
      driveRightB.set(0);
      intakePivot.set(0);
      intake.set(0);
      flywheelA.set(0);
      flywheelB.set(0);
      flap.set(0);
      climbLeft.set(0);
      climbRight.set(0);
    }
    
    //Intake
    if (driveController.getLeftTriggerAxis() > 0.5)
    {
      intakeActive = true;
    }
    else
    {
      intakeActive = false;
    }

    if (intakeActive)
    {
      intake.set(intakeSpeed);
    }
    
    //Outake
    if (driveController.getRightTriggerAxis() > 0.5)
    {
      outakeActive = true;
    }
    else 
    {
      outakeActive = false;
    }

    if (outakeActive)
    {
      intake.set(outakeSpeed);
    }

    //Climb
    if (driveController.getRightBumper()) {
      climbLeft.set(climbSpeedUp);
      climbRight.set(climbSpeedUp);
    } else if (driveController.getRightBumperReleased()) {
      climbLeft.set(0);
      climbRight.set(0);
    }
    if (driveController.getLeftBumper()) {
      climbLeft.set(climbSpeedDown);
      climbRight.set(climbSpeedDown);
    } else if (driveController.getLeftBumperReleased()) {
      climbLeft.set(0);
      climbRight.set(0);
    }

    //Limit Switches
    if (intakeIn.get()) //Intake In
    {
      intakePivot.set(0);
    }
    else if (intakeOut.get()) //Intake Out
    {
      intakePivot.set(0);
    }
    else if (intakePieceDetection.get()) //Intake Piece Detection
    {
      intakePivot.set(-intakePivotSpeed);
    }
    else if (flapIn.get()) //Flap In
    {
      flap.set(0);
    }
    else if (flapOut.get()) //Flap Out
    {
      flap.set(0);
    }
  }

  @Override
  public void disabledInit() {
  //Turn off all motors when disabled
  driveLeftA.set(0);
  driveLeftB.set(0);
  driveRightA.set(0);
  driveRightB.set(0);
  intakePivot.set(0);
  intake.set(0);
  flywheelA.set(0);
  flywheelB.set(0);
  climbLeft.set(0);
  climbRight.set(0);

  }
  @Override
  public void disabledPeriodic() {}

  @Override
  public void testInit() {}

  @Override
  public void testPeriodic() {}

  @Override
  public void simulationInit() {}

  @Override
  public void simulationPeriodic() {}
}
